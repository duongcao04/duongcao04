{
    "posts": [
        {
            "id": 1,
            "title": "Tại sao package-lock.json tồn tại và cách nó hoạt động",
            "description": "Trong quá trình phát triển phần mềm, package-lock.json là một file quan trọng giúp đảm bảo sự nhất quán và đồng bộ giữa các máy tính trong dự án. Bài viết này sẽ giải thích tại sao package-lock.json tồn tại, cách nó hoạt động và lý do bạn nên commit file này vào repository.",
            "content": "# Tại sao package-lock.json tồn tại và cách nó hoạt động\n\n![package-lock.json](https://images.unsplash.com/photo-1543251698-10f13f004b0f?q=80&w=1963&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\n\nTrong quá trình phát triển phần mềm, `package-lock.json` là một file quan trọng giúp đảm bảo sự nhất quán và đồng bộ giữa các máy tính trong dự án. Bài viết này sẽ giải thích chi tiết tại sao `package-lock.json` tồn tại, cách nó hoạt động và lý do bạn nên commit file này vào repository.\n\n## 1. Tại sao `package-lock.json` tồn tại?\n\nKhi bạn cài đặt hoặc cập nhật các package trong dự án bằng npm, `package-lock.json` được tạo ra tự động. File này lưu trữ thông tin chính xác về các phiên bản package đang được sử dụng, bao gồm cả các package phụ thuộc (dependencies). Điều này giúp tránh tình trạng \"It works on my machine\" khi deploy ứng dụng sang các môi trường khác.\n\n### Các lý do chính:\n\n- **Đảm bảo nhất quán**: Mọi thành viên trong dự án sẽ cài đặt đúng phiên bản package.\n- **Tái tạo môi trường**: Khi chạy `npm ci`, npm sẽ dựa vào `package-lock.json` để tái tạo đúng môi trường.\n- **Dễ dàng debug**: Khi gặp sự cố liên quan đến dependencies, `package-lock.json` giúp bạn kiểm tra phiên bản đã cài đặt.\n\n## 2. `package-lock.json` hoạt động như thế nào?\n\n- Khi bạn chạy `npm install`, npm sẽ:\n  - Đọc file `package.json` để tìm các package chính mà bạn muốn cài đặt.\n  - Giải quyết cây phụ thuộc (dependency tree).\n  - Lưu thông tin chính xác của từng package (bao gồm version, integrity, resolved URL...) vào `package-lock.json`.\n\n- File `package-lock.json` chứa toàn bộ cấu trúc cây phụ thuộc, đảm bảo việc cài đặt được lặp lại chính xác trong tương lai.\n\n## 3. Vì sao nên commit `package-lock.json` vào repository?\n\n- **Đồng bộ hóa môi trường phát triển và production**: Giảm thiểu lỗi do chênh lệch phiên bản.\n- **Tối ưu hóa build CI/CD**: Giúp quá trình build trên pipeline diễn ra nhanh chóng, chính xác.\n- **Ổn định dự án**: Giảm thiểu rủi ro khi có update mới từ các package.\n\n> Lưu ý: Đối với các dự án sử dụng Yarn, bạn sẽ thấy file `yarn.lock` có chức năng tương tự.\n\n## Kết luận\n\nFile `package-lock.json` đóng vai trò rất quan trọng trong việc duy trì sự ổn định và nhất quán của dự án Node.js. Hãy chắc chắn commit file này vào repository để bảo vệ dự án khỏi những lỗi không mong muốn và giúp team bạn làm việc hiệu quả hơn.\n\n---\n\nNếu bạn có thắc mắc hay muốn chia sẻ kinh nghiệm về việc sử dụng `package-lock.json`, đừng ngần ngại để lại bình luận nhé! 🚀✨",
            "thumbnail": "https://miro.medium.com/v2/resize:fit:1400/1*fxotZ2ReBeL8Ss5-6Oe_dw.png",
            "createdAt": "2021-09-01",
            "slug": "package-lock-json"
        },
        {
            "id": 2,
            "title": "Cách sử dụng TypeScript với Node.js",
            "description": "TypeScript là một ngôn ngữ lập trình phổ biến trong cộng đồng Node.js, giúp tăng hiệu suất, giảm lỗi và dễ dàng bảo trì mã nguồn. Bài viết này sẽ hướng dẫn cách sử dụng TypeScript với Node.js, từ cài đặt, cấu hình cho đến viết mã và chạy ứng dụng.",

            "content": "# Cách sử dụng TypeScript với Node.js\n\n![TypeScript với Node.js](https://images.unsplash.com/photo-1501045337096-542a73dafa4f?q=80&w=2052&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\n\nTypeScript là một ngôn ngữ lập trình phổ biến trong cộng đồng Node.js. Nó mang lại khả năng kiểm tra kiểu tĩnh (static type-checking), tăng hiệu suất phát triển và giúp mã nguồn dễ bảo trì hơn. Trong bài viết này, chúng ta sẽ cùng nhau tìm hiểu cách tích hợp TypeScript vào dự án Node.js từ bước cài đặt, cấu hình, đến viết và chạy ứng dụng.\n\n## 1. Tại sao nên dùng TypeScript với Node.js?\n\n- **Kiểm tra kiểu tĩnh**: Giúp phát hiện lỗi ngay khi viết code, tránh lỗi runtime.\n- **Tự động hoàn thành (autocomplete)**: Tích hợp tốt với các IDE như VSCode, giúp tăng tốc độ lập trình.\n- **Mã nguồn dễ bảo trì**: Dễ dàng mở rộng, refactor code mà không lo \"vỡ\" ứng dụng.\n\n## 2. Cài đặt TypeScript cho Node.js\n\nTrước tiên, bạn cần tạo một thư mục dự án mới:\n\n```bash\nmkdir my-node-typescript\ncd my-node-typescript\nnpm init -y\n```\n\nSau đó, cài đặt TypeScript và các kiểu định nghĩa (type definitions):\n\n```bash\nnpm install typescript ts-node @types/node --save-dev\n```\n\n- `typescript`: Trình biên dịch TypeScript.\n- `ts-node`: Cho phép chạy file `.ts` trực tiếp mà không cần biên dịch.\n- `@types/node`: Cung cấp các định nghĩa kiểu cho Node.js.\n\n## 3. Cấu hình TypeScript\n\nTạo file `tsconfig.json`:\n\n```bash\nnpx tsc --init\n```\n\nNội dung cơ bản:\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"CommonJS\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\"\n  }\n}\n```\n\n- `outDir`: Nơi biên dịch file `.ts` thành `.js`.\n- `rootDir`: Thư mục chứa file nguồn TypeScript.\n- `strict`: Bật kiểm tra kiểu nghiêm ngặt.\n\n## 4. Viết mã TypeScript\n\nTạo thư mục `src` và file `index.ts`:\n\n```typescript\n// src/index.ts\n\nimport http from \"http\";\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"text/plain\");\n  res.end(\"Hello, TypeScript với Node.js!\");\n});\n\nserver.listen(3000, () => {\n  console.log(\"Server đang chạy tại http://localhost:3000\");\n});\n```\n\n## 5. Chạy ứng dụng\n\nBạn có thể chạy ứng dụng trực tiếp bằng `ts-node`:\n\n```bash\nnpx ts-node src/index.ts\n```\n\nHoặc biên dịch sang JavaScript rồi chạy:\n\n```bash\nnpx tsc\nnode dist/index.js\n```\n\n## Kết luận\n\nTypeScript mang lại nhiều lợi ích khi phát triển dự án Node.js, đặc biệt với những dự án lớn và phức tạp. Hãy bắt đầu tích hợp TypeScript ngay hôm nay để trải nghiệm lập trình mạnh mẽ và dễ bảo trì hơn!\n\n---\n\nNếu bạn có kinh nghiệm hoặc câu hỏi về việc sử dụng TypeScript với Node.js, hãy chia sẻ cùng mình nhé! 🚀",
            "thumbnail": "https://fireship.io/lessons/typescript-nodejs-setup/img/featured.png",
            "createdAt": "2025-01-27",
            "slug": "typescript-nodejs"
        },
        {
            "id": 3,
            "title": "Cách sử dụng React Hook Form",
            "description": "React Hook Form là một thư viện quản lý form mạnh mẽ và dễ sử dụng trong ứng dụng React. Bài viết này sẽ hướng dẫn cách sử dụng React Hook Form, từ cài đặt, cấu hình cho đến viết mã và xử lý form.",

            "content": "# Cách sử dụng React Hook Form\n\n![React Hook Form](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSabxlXYZlMYIfIrW1eQ6W6pW4yaeaM1lzVLA&s)\n\nReact Hook Form là một thư viện mạnh mẽ và phổ biến giúp quản lý form trong ứng dụng React một cách dễ dàng, tối ưu và thân thiện với hiệu suất. Thay vì phải viết nhiều state, handler rườm rà, React Hook Form cung cấp API gọn nhẹ và dễ tích hợp.\n\nTrong bài viết này, chúng ta sẽ cùng nhau tìm hiểu:\n- React Hook Form là gì?\n- Cách cài đặt và sử dụng cơ bản.\n- Xử lý form và validation.\n\n## 1. React Hook Form là gì?\n\nReact Hook Form giúp đơn giản hóa việc quản lý form bằng cách sử dụng các React Hook (`useForm`, `Controller`,...). Nó hỗ trợ kiểm soát dữ liệu form, validation, và dễ dàng mở rộng với các thư viện như Yup, Zod...\n\n## 2. Cài đặt React Hook Form\n\nBạn có thể cài đặt bằng npm hoặc yarn:\n```bash\nnpm install react-hook-form\n# Hoặc\nyarn add react-hook-form\n```\n\n## 3. Sử dụng cơ bản\n\nVí dụ tạo một form đơn giản:\n```jsx\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nfunction MyForm() {\n  const { register, handleSubmit, formState: { errors } } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div>\n        <label>Tên:</label>\n        <input {...register(\"name\", { required: \"Tên không được để trống\" })} />\n        {errors.name && <p>{errors.name.message}</p>}\n      </div>\n\n      <div>\n        <label>Email:</label>\n        <input\n          {...register(\"email\", {\n            required: \"Email không được để trống\",\n            pattern: {\n              value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n              message: \"Email không hợp lệ\"\n            }\n          })}\n        />\n        {errors.email && <p>{errors.email.message}</p>}\n      </div>\n\n      <button type=\"submit\">Gửi</button>\n    </form>\n  );\n}\n\nexport default MyForm;\n```\n\n## 4. Tích hợp với Yup cho validation nâng cao\n\nĐể có validation mạnh mẽ hơn, bạn có thể kết hợp với thư viện Yup:\n```bash\nnpm install @hookform/resolvers yup\n```\n\nSử dụng trong form:\n```jsx\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nconst schema = yup.object().shape({\n  name: yup.string().required(\"Tên không được để trống\"),\n  email: yup.string().email(\"Email không hợp lệ\").required(\"Email không được để trống\")\n});\n\nconst { register, handleSubmit, formState: { errors } } = useForm({\n  resolver: yupResolver(schema)\n});\n```\n\n## 5. Kết luận\n\nReact Hook Form là công cụ tuyệt vời để xây dựng các form phức tạp với hiệu suất cao và mã nguồn gọn gàng. Hãy thử tích hợp React Hook Form vào dự án của bạn để trải nghiệm lập trình form dễ dàng và hiệu quả hơn!\n\n---\n\nNếu bạn có kinh nghiệm hoặc câu hỏi về React Hook Form, hãy chia sẻ nhé! 🚀😊",
            "thumbnail": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSabxlXYZlMYIfIrW1eQ6W6pW4yaeaM1lzVLA&s",
            "createdAt": "2024-09-01",
            "slug": "react-hook-form"
        },
        {
            "id": 4,
            "title": "Hướng dẫn sử dụng Docker cho người mới bắt đầu",
            "description": "Docker là một công cụ mạnh mẽ giúp tạo ra các container để chạy ứng dụng một cách nhất quán trên nhiều môi trường khác nhau. Bài viết này sẽ hướng dẫn cách sử dụng Docker cho người mới bắt đầu, từ cài đặt, cấu hình cho đến chạy container.",

            "content": "# Hướng dẫn sử dụng Docker cho người mới bắt đầu\n\n![Docker](https://images.unsplash.com/photo-1556761175-4b46a572b786?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\n\nDocker là một công cụ mạnh mẽ giúp đóng gói ứng dụng và các phụ thuộc vào trong một container. Với Docker, bạn có thể chạy ứng dụng nhất quán trên nhiều môi trường khác nhau – từ máy tính của bạn cho đến các server trên cloud. Bài viết này sẽ hướng dẫn bạn cách sử dụng Docker từ cơ bản đến chạy ứng dụng đầu tiên.\n\n## 1. Docker là gì?\n\nDocker là một nền tảng mã nguồn mở để xây dựng, triển khai và quản lý các container. Container chứa toàn bộ ứng dụng cùng các thư viện, biến môi trường, đảm bảo ứng dụng \"chạy ở đâu cũng giống nhau\".\n\n### Lợi ích chính:\n- **Nhẹ và nhanh**: So với máy ảo, container chỉ chứa những gì cần thiết.\n- **Tái sử dụng**: Có thể chia sẻ Docker Image cho người khác.\n- **Môi trường đồng nhất**: Không lo vấn đề \"It works on my machine\".\n\n## 2. Cài đặt Docker\n\n### Trên Windows/macOS\n- Truy cập [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop) và tải Docker Desktop.\n- Làm theo hướng dẫn cài đặt và khởi động Docker Desktop.\n\n### Trên Linux (Ubuntu)\n```bash\nsudo apt update\nsudo apt install docker.io -y\nsudo systemctl start docker\nsudo systemctl enable docker\n```\n\nKiểm tra phiên bản Docker:\n```bash\ndocker --version\n```\n\n## 3. Các lệnh Docker cơ bản\n\n- Kiểm tra Docker daemon:\n```bash\ndocker info\n```\n- Kéo (download) một image từ Docker Hub:\n```bash\ndocker pull nginx\n```\n- Chạy một container:\n```bash\ndocker run -d -p 8080:80 nginx\n```\n- Liệt kê các container đang chạy:\n```bash\ndocker ps\n```\n- Dừng một container:\n```bash\ndocker stop <container_id>\n```\n- Xóa một container:\n```bash\ndocker rm <container_id>\n```\n\n## 4. Tạo Dockerfile cơ bản\n\nDockerfile giúp bạn định nghĩa cách build image:\n```Dockerfile\n# Sử dụng Node.js image\nFROM node:20\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nCMD [\"node\", \"index.js\"]\n```\n\nSau đó build image:\n```bash\ndocker build -t my-node-app .\n```\n\nVà chạy ứng dụng:\n```bash\ndocker run -d -p 3000:3000 my-node-app\n```\n\n## 5. Kết luận\n\nDocker giúp việc phát triển và triển khai ứng dụng trở nên nhanh chóng và dễ dàng. Hãy thực hành các lệnh cơ bản để làm quen với Docker. Chúc bạn thành công trong hành trình \"container hóa\" ứng dụng của mình!\n\n---\n\nNếu bạn gặp khó khăn hay có câu hỏi về Docker, hãy để lại bình luận hoặc liên hệ với mình nhé! 🚀😊",
            "thumbnail": "https://images.viblo.asia/fad7cf1a-772f-43e4-9042-e96d5d903b2b.png",
            "createdAt": "2023-10-01",
            "slug": "docker-beginner-guide"
        },
        {
            "id": 5,
            "title": "Hiểu về GraphQL và cách sử dụng với React",
            "description": "GraphQL là một ngôn ngữ truy vấn mạnh mẽ cho API, giúp tối ưu hóa việc lấy dữ liệu. Bài viết này sẽ hướng dẫn cách sử dụng GraphQL với React, từ cài đặt, cấu hình cho đến viết mã và truy vấn dữ liệu.",
            "content": "# Hiểu về GraphQL và cách sử dụng với React\n\n![GraphQL và React](https://images.unsplash.com/photo-1543286386-713bdd548da4?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\n\nGraphQL là một ngôn ngữ truy vấn API do Facebook phát triển, thay thế cách tiếp cận REST truyền thống bằng việc cho phép client xác định chính xác dữ liệu mình cần. Kết hợp với React, GraphQL mang lại trải nghiệm xây dựng ứng dụng hiện đại, tối ưu hóa hiệu suất và giảm thiểu dư thừa dữ liệu.\n\nTrong bài viết này, chúng ta sẽ tìm hiểu:\n- GraphQL là gì và tại sao nên dùng.\n- Cách cài đặt và sử dụng GraphQL trong dự án React.\n- Viết các truy vấn (query) và mutation cơ bản.\n\n## 1. GraphQL là gì?\n\nGraphQL hoạt động dựa trên nguyên lý **client-driven** (client yêu cầu đúng dữ liệu mình muốn). Thay vì gọi nhiều endpoint như REST, bạn chỉ cần một endpoint duy nhất (`/graphql`) để gửi các truy vấn.\n\n### Ưu điểm của GraphQL:\n✅ Lấy đúng dữ liệu cần thiết, không dư thừa.\n✅ Giảm số lượng request.\n✅ Dễ mở rộng và phát triển.\n\n## 2. Cài đặt Apollo Client cho React\n\n[Apollo Client](https://www.apollographql.com/docs/react/) là thư viện phổ biến nhất để tích hợp GraphQL vào React:\n\n```bash\nnpm install @apollo/client graphql\n```\n\nCấu hình Apollo Client:\n\n```tsx\n// src/apolloClient.js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://example.com/graphql', // Thay bằng endpoint GraphQL của bạn\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n```\n\n## 3. Sử dụng ApolloProvider trong React\n\n```tsx\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './apolloClient';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n```\n\n## 4. Viết một truy vấn (query) cơ bản\n\n```tsx\nimport { useQuery, gql } from '@apollo/client';\n\nconst GET_USERS = gql`\n  query GetUsers {\n    users {\n      id\n      name\n      email\n    }\n  }\n`;\n\nfunction Users() {\n  const { data, loading, error } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <ul>\n      {data.users.map(user => (\n        <li key={user.id}>{user.name} - {user.email}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Users;\n```\n\n## 5. Gửi Mutation\n\n```tsx\nimport { useMutation, gql } from '@apollo/client';\n\nconst ADD_USER = gql`\n  mutation AddUser($name: String!, $email: String!) {\n    addUser(name: $name, email: $email) {\n      id\n      name\n      email\n    }\n  }\n`;\n\nfunction AddUserForm() {\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await addUser({ variables: { name: 'New User', email: 'new@example.com' } });\n  };\n\n  return <button onClick={handleSubmit}>Thêm người dùng</button>;\n}\n\nexport default AddUserForm;\n```\n\n## 6. Kết luận\n\nGraphQL cùng với React và Apollo Client mang lại cách tiếp cận linh hoạt, tối ưu hoá dữ liệu và trải nghiệm lập trình dễ dàng hơn. Nếu bạn muốn xây dựng ứng dụng tương tác nhiều dữ liệu, GraphQL sẽ là một công cụ không thể thiếu.\n\n---\n\n✨ Hãy chia sẻ trải nghiệm của bạn với GraphQL trong phần bình luận nhé!",
            "thumbnail": "https://miro.medium.com/v2/resize:fit:1400/0*kqSxzVukh7BGYRxQ.png",
            "createdAt": "2022-05-15",
            "slug": "graphql-react"
        },
        {
            "id": 6,
            "title": "Làm quen với Next.js và các tính năng nổi bật",
            "description": "Next.js là một framework mạnh mẽ cho React, giúp xây dựng các ứng dụng web tĩnh và động một cách dễ dàng. Bài viết này sẽ giới thiệu về Next.js và các tính năng nổi bật của nó, từ cài đặt, cấu hình cho đến triển khai ứng dụng.",

            "content": "# Làm quen với Next.js và các tính năng nổi bật\n\n![Next.js](https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\n\nNext.js là một framework mạnh mẽ dựa trên React, giúp bạn xây dựng các ứng dụng web hiện đại một cách dễ dàng và nhanh chóng. Nó cung cấp các tính năng nổi bật như SSR (Server-side rendering), SSG (Static site generation), API Routes và nhiều tiện ích khác. Hãy cùng khám phá nhé!\n\n## 1. Next.js là gì?\n\nNext.js là một framework mã nguồn mở được phát triển bởi Vercel. Nó cung cấp một số tính năng quan trọng mà React chưa có sẵn, giúp xây dựng các ứng dụng production-ready một cách hiệu quả.\n\n### Lợi ích khi sử dụng Next.js:\n- **SEO tốt hơn**: Hỗ trợ SSR và SSG.\n- **Hiệu suất cao**: Tối ưu hóa tải trang và tốc độ.\n- **Triển khai dễ dàng**: Tích hợp tốt với Vercel, Netlify…\n- **Hỗ trợ API Routes**: Xây dựng API ngay trong ứng dụng.\n\n## 2. Cài đặt Next.js\n\nBạn có thể bắt đầu một dự án Next.js rất dễ dàng:\n\n```bash\nnpx create-next-app@latest my-next-app\ncd my-next-app\nnpm run dev\n```\n\nTruy cập `http://localhost:3000` để xem ứng dụng mẫu của bạn.\n\n## 3. Các tính năng nổi bật\n\n### 3.1. Pages và Routing tự động\n\nTrong Next.js, mỗi file `.tsx` hoặc `.js` trong thư mục `pages/` sẽ tự động trở thành một route:\n\n```\npages/\n├── index.js       // Trang chủ (/)\n├── about.js       // Trang /about\n└── blog/[slug].js // Dynamic routing\n```\n\n### 3.2. Static Site Generation (SSG)\n\nSSG giúp tạo ra các trang tĩnh ngay tại build time, cải thiện SEO và tốc độ:\n\n```tsx\nexport async function getStaticProps() {\n  return {\n    props: { data: \"Hello Next.js\" }\n  };\n}\n```\n\n### 3.3. Server-side Rendering (SSR)\n\nSSR giúp render trang trên server và gửi HTML đến trình duyệt:\n\n```tsx\nexport async function getServerSideProps() {\n  return {\n    props: { data: \"Trang được render server-side\" }\n  };\n}\n```\n\n### 3.4. API Routes\n\nBạn có thể xây dựng API ngay trong thư mục `pages/api/`:\n\n```tsx\n// pages/api/hello.js\nexport default function handler(req, res) {\n  res.status(200).json({ message: \"Hello từ API\" });\n}\n```\n\n### 3.5. Image Optimization\n\nNext.js hỗ trợ `<Image />` để tối ưu ảnh:\n\n```tsx\nimport Image from 'next/image';\n<Image src=\"/logo.png\" width={200} height={100} alt=\"Logo\" />\n```\n\n## 4. Triển khai ứng dụng Next.js\n\nNext.js tích hợp rất tốt với nền tảng [Vercel](https://vercel.com), chỉ cần push lên GitHub và kết nối với Vercel là ứng dụng đã sẵn sàng production.\n\nBạn cũng có thể build thủ công:\n```bash\nnpm run build\nnpm run start\n```\n\n## 5. Kết luận\n\nNext.js không chỉ giúp bạn phát triển nhanh hơn mà còn mang lại hiệu suất và khả năng mở rộng vượt trội cho ứng dụng của bạn. Hãy thử ngay hôm nay và tận dụng các tính năng mạnh mẽ của nó!\n\n---\n\nNếu bạn cần hỗ trợ hoặc có câu hỏi về Next.js, hãy để lại bình luận nhé! 🚀😊",
            "thumbnail": "https://process.fs.teachablecdn.com/ADNupMnWyR7kCWRvm76Laz/resize=width:705/https://cdn.filestackcontent.com/bxoLUywRIWcKyZPNXznO",
            "createdAt": "2023-07-20",
            "slug": "nextjs-features"
        }
    ]
}
